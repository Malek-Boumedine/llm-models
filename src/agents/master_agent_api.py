from langgraph.graph import StateGraph, START, END
from typing import TypedDict, Optional
from src.agents.conventions_collectives_agent import ConventionsCollectivesAgent
from src.agents.droit_travail_agent import DroitTravailAgent
from langchain_ollama import ChatOllama
from langchain_groq import ChatGroq
from langchain_perplexity import ChatPerplexity
import os
from langgraph.checkpoint.memory import MemorySaver
from dotenv import load_dotenv
import warnings


warnings.filterwarnings("ignore")


load_dotenv()

# Structure de l'√©tat simplifi√©e
class MasterState(TypedDict):
    user_query: str
    droit_travail_response: str
    droit_travail_confidence: str
    needs_cc: bool
    cc_analysis: str
    cc_identified: Optional[str]
    cc_response: str
    cc_confidence: str
    final_response: str
    confidence_level: str

class APIMasterAgent:
    """Master Agent simplifi√© utilisant uniquement les 2 agents sp√©cialis√©s"""
    
    def __init__(self, model_type=None):
        # Configuration du mod√®le
        self.model_type = model_type or os.getenv("MODEL_TYPE", "groq")  # Groq par d√©faut
        self.llm = self._initialize_llm()
        
        # Agents sp√©cialis√©s (seulement 2)
        self.cc_agent = ConventionsCollectivesAgent()
        self.droit_agent = DroitTravailAgent()

    def _initialize_llm(self):
        """Initialise le LLM selon le type configur√©"""
        if self.model_type == "local":
            return ChatOllama(
                model=os.getenv("MODEL_NAME", "llama3.1:latest"),
                temperature=0
            )
        elif self.model_type == "groq":
            return ChatGroq(
                model=os.getenv("GROQ_MODEL", "meta-llama/llama-3.1-70b-instruct"),
                api_key=os.getenv("GROQ_API_KEY"),
                temperature=0
            )
        elif self.model_type == "perplexity":
            return ChatPerplexity(
                model=os.getenv("PERPLEXITY_MODEL", "sonar"),
                pplx_api_key=os.getenv("PERPLEXITY_API_KEY"),
                temperature=0
            )

    # =======================================================================
    # NODES SIMPLIFI√âS
    # =======================================================================
    
    def fetch_general_labor_rules_node(self, state: MasterState):
        """R√©cup√®re les r√®gles g√©n√©rales du droit du travail"""
        try:
            result = self.droit_agent.query(state["user_query"])
            response = result.get("response", "Aucune r√©ponse du droit du travail")
            confidence = self._extract_confidence_from_response(response)
            
            return {
                "droit_travail_response": response,
                "droit_travail_confidence": confidence
            }
        except Exception as e:
            return {
                "droit_travail_response": f"Erreur : {str(e)}",
                "droit_travail_confidence": "basse"
            }

    def analyze_cc_need_node(self, state: MasterState):
        """Analyse si une convention collective est n√©cessaire"""
        
        analysis_prompt = f"""Tu es un expert juridique fran√ßais de niveau ma√Ætre. Ta mission est de fournir des r√©ponses d'excellence absolue.

        QUESTION: {state['user_query']}
        CONTEXTE DISPONIBLE: {state['droit_travail_response']}
        CONVENTION COLLECTIVE: {state.get('cc_response', 'Non consult√©e')}

        STANDARDS D'EXCELLENCE OBLIGATOIRES:

        1. PR√âCISION FACTUELLE ABSOLUE
        - Chiffres exacts (‚Ç¨, heures, %, jours, taux)
        - Calculs corrects (SMIC mensuel = horaire √ó 151,67h, pas √ó 4 semaines)
        - Dates pr√©cises des textes et r√©formes
        - R√©f√©rences l√©gales compl√®tes (articles, d√©crets, num√©ros)

        2. CALCULS ET FORMULES EXACTES
        - Dur√©es: heures r√©glementaires, majorations, repos
        - Montants: salaires, indemnit√©s, primes (brut/net si pertinent)
        - Taux: majoration heures sup (25%, 50%), cong√©s pay√©s (10%)
        - D√©lais: pr√©avis, prescription, proc√©dures

        3. HI√âRARCHIE JURIDIQUE RESPECT√âE
        - Code du travail (base l√©gale minimum)
        - Convention collective (si plus favorable)
        - Accord d'entreprise (si plus favorable encore)
        - Jurisprudence r√©cente si pertinente

        4. STRUCTURE DE R√âPONSE PROFESSIONNELLE
        - R√©ponse directe en premi√®re ligne
        - Montants/dur√©es/taux en chiffres clairs
        - Base l√©gale pr√©cise (article + r√©f√©rence)
        - Conditions d'application si n√©cessaires
        - Exceptions ou cas particuliers

        5. GESTION DE L'INCERTITUDE
        - Si donn√©es manquantes: "Information non disponible dans mes sources"
        - Si estimation: "Estimation bas√©e sur [source], √† v√©rifier officiellement"
        - Si √©volution r√©cente: "Sous r√©serve des derni√®res modifications"

        EXEMPLE D'EXCELLENCE:
        Question SMIC ‚Üí "11,27‚Ç¨/heure brut depuis le 1er janvier 2025. Mensuel: 1 709,85‚Ç¨ brut (151,67h). Base: Art. L.3231-1 Code du travail, d√©cret n¬∞2024-963."

        Question Heures sup ‚Üí "Majoration 25% pour heures 36-43, 50% au-del√†. Base: Art. L.3121-22 Code du travail. Calcul: salaire horaire √ó 1,25 ou 1,50."

        CONSIGNE FINALE: R√©ponds avec l'excellence d'un consultant juridique senior. Pr√©cision absolue, structure claire, r√©f√©rences exactes.

        R√âPONSE:"""
        
        try:
            response = self.llm.invoke(analysis_prompt)
            analysis = response.content.strip()
            needs_cc = "OUI" in analysis.upper()[:10]
            
            return {
                "needs_cc": needs_cc,
                "cc_analysis": analysis
            }
        except Exception as e:
            return {
                "needs_cc": False,
                "cc_analysis": f"Erreur d'analyse : {str(e)}"
            }

    def fetch_cc_rules_node(self, state: MasterState):
        """R√©cup√®re les r√®gles de la convention collective"""
        
        # Construction d'une query optimis√©e pour l'agent CC
        cc_query = f"""
        QUESTION ORIGINALE : {state['user_query']}
        ANALYSE : {state['cc_analysis']}
        
        Recherche les r√®gles sp√©cifiques des conventions collectives pour cette question.
        Utilise ton format de r√©ponse standardis√© avec √âTAPES.
        """
        
        try:
            result = self.cc_agent.query(cc_query)
            response = result.get("response", "Aucune r√®gle conventionnelle trouv√©e")
            confidence = self._extract_confidence_from_response(response)
            
            return {
                "cc_response": response,
                "cc_confidence": confidence
            }
        except Exception as e:
            return {
                "cc_response": f"Erreur conventions : {str(e)}",
                "cc_confidence": "basse"
            }

    def compile_final_response_node(self, state: MasterState):
        """Compile la r√©ponse finale"""
        
        compilation_prompt = f"""Tu es un assistant juridique fran√ßais. R√©ponds de fa√ßon directe et factuelle.

        QUESTION: {state['user_query']}
        CONTEXTE: {state['droit_travail_response']}

        R√àGLES:
        - Donne des chiffres pr√©cis (montants, dur√©es, taux)
        - Si tu ne connais pas exactement, donne ta meilleure estimation
        - Sois direct, pas de formules creuses
        - Structure simple: R√©ponse + Base l√©gale + Montant/Dur√©e si applicable

        EXEMPLE SMIC: "Le SMIC horaire est de 11,88‚Ç¨ brut (estimation 2025). Base: Articles L.3231-1 Code du travail."

        R√©ponds maintenant:"""
        
        try:
            response = self.llm.invoke(compilation_prompt)
            compiled_response = response.content
            overall_confidence = self._evaluate_overall_confidence(state)
            
            return {
                "final_response": compiled_response,
                "confidence_level": overall_confidence
            }
        except Exception as e:
            # R√©ponse de fallback simple
            fallback = f"""üèõÔ∏è **R√âPONSE JURIDIQUE**

‚öñÔ∏è **R√àGLE G√âN√âRALE :**
{state['droit_travail_response']}

‚ö†Ô∏è **Avertissement :** Erreur lors de la compilation. Consultez un professionnel du droit."""
            
            return {
                "final_response": fallback,
                "confidence_level": "basse"
            }

    # =======================================================================
    # M√âTHODES UTILITAIRES
    # =======================================================================
    
    def _extract_confidence_from_response(self, response: str) -> str:
        """Extrait le niveau de confiance d'une r√©ponse"""
        if not response or response is None:
            return "basse"
        response_lower = response.lower()
        
        # Recherche directe de "certitude"
        if "certitude" in response_lower:
            if "haute" in response_lower:
                return "haute"
            elif "moyenne" in response_lower:
                return "moyenne"
            elif "basse" in response_lower:
                return "basse"
        
        # Analyse par indicateurs
        confidence_indicators = ["idcc", "article", "pr√©cis", "trouv√©"]
        uncertainty_indicators = ["non trouv√©", "incertain", "peut-√™tre", "aucune"]
        
        has_confidence = any(ind in response_lower for ind in confidence_indicators)
        has_uncertainty = any(ind in response_lower for ind in uncertainty_indicators)
        
        if has_confidence and not has_uncertainty:
            return "haute"
        elif has_confidence or not has_uncertainty:
            return "moyenne"
        else:
            return "basse"
    
    def _evaluate_overall_confidence(self, state: MasterState) -> str:
        """√âvalue la confiance globale de la r√©ponse"""
        dt_conf = state.get("droit_travail_confidence", "basse")
        cc_conf = state.get("cc_confidence", "non applicable")
        
        # Logique simplifi√©e
        if dt_conf == "haute" and (cc_conf == "haute" or not state["needs_cc"]):
            return "haute"
        elif dt_conf in ["haute", "moyenne"] and cc_conf in ["haute", "moyenne", "non applicable"]:
            return "moyenne"
        else:
            return "basse"

    # =======================================================================
    # ROUTING SIMPLIFI√â
    # =======================================================================
    
    def route_after_analysis(self, state: MasterState) -> str:
        """Route apr√®s analyse du besoin de convention collective"""
        return "fetch_cc_rules" if state["needs_cc"] else "compile_final_response"

    # =======================================================================
    # CONSTRUCTION DU WORKFLOW SIMPLIFI√â
    # =======================================================================
    
    def build(self):
        """Construit le workflow simplifi√©"""
        workflow = StateGraph(MasterState)
        
        # Nodes simplifi√©s (seulement 4)
        workflow.add_node("fetch_general_rules", self.fetch_general_labor_rules_node)
        workflow.add_node("analyze_cc_need", self.analyze_cc_need_node)
        workflow.add_node("fetch_cc_rules", self.fetch_cc_rules_node)
        workflow.add_node("compile_final_response", self.compile_final_response_node)
        
        # Flux lin√©aire simplifi√©
        workflow.add_edge(START, "fetch_general_rules")
        workflow.add_edge("fetch_general_rules", "analyze_cc_need")
        
        # Route conditionnelle unique
        workflow.add_conditional_edges(
            "analyze_cc_need",
            self.route_after_analysis,
            {
                "fetch_cc_rules": "fetch_cc_rules",
                "compile_final_response": "compile_final_response"
            }
        )
        
        workflow.add_edge("fetch_cc_rules", "compile_final_response")
        workflow.add_edge("compile_final_response", END)
        
        # Compilation
        memory = MemorySaver()
        return workflow.compile(checkpointer=memory)

    # =======================================================================
    # INTERFACE API SIMPLIFI√âE
    # =======================================================================
    
    def query(self, user_query: str, conversation_history: list = None, thread_id: str = "default") -> dict:
        """Interface simplifi√©e pour l'API avec m√©moire conversationnelle"""
        app = self.build()
        
        # üß† INT√âGRATION M√âMOIRE : Formatage contexte conversationnel
        enhanced_query = user_query
        if conversation_history and len(conversation_history) > 0:
            # Prendre les 5 derniers √©changes pour le contexte
            recent_history = conversation_history[-5:]
            
            context = "\n--- CONTEXTE CONVERSATIONNEL PR√âC√âDENT ---\n"
            for msg in recent_history:
                role = "Utilisateur" if msg["role"] == "user" else "Assistant"
                content = msg["content"][:150] + "..." if len(msg["content"]) > 150 else msg["content"]
                context += f"{role}: {content}\n"
            context += "--- FIN CONTEXTE ---\n\nQUESTION ACTUELLE: "
            
            enhanced_query = context + user_query
        
        initial_state = {
            "user_query": enhanced_query,
            "droit_travail_response": "",
            "droit_travail_confidence": "",
            "needs_cc": False,
            "cc_analysis": "",
            "cc_identified": None,
            "cc_response": "",
            "cc_confidence": "",
            "final_response": "",
            "confidence_level": ""
        }
        
        config = {"configurable": {"thread_id": thread_id}}
        
        try:
            final_state = app.invoke(initial_state, config)
            
            return {
                "success": True,
                "response": final_state.get("final_response", "Erreur"),
                # üî• CONFIDENCE SUPPRIM√â COMPL√àTEMENT
                "cc_used": bool(final_state.get("cc_response") and 
                            "non consult√©e" not in final_state.get("cc_response", "")),
                "thread_id": thread_id,
                "memory_used": len(conversation_history) if conversation_history else 0
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "response": "Erreur lors du traitement"
            }

# =======================================================================
# TEST SIMPLIFI√â
# =======================================================================

def test_simple_agent():
    """Test de l'agent simplifi√©"""
    agent = APIMasterAgent()
    
    test_questions = [
        "Quel est le montant exact en euros du SMIC en France depuis janvier 2025 ?",
        "Quelle est la majoration des heures de nuit en boulangerie ?",
        "Dur√©e du pr√©avis de d√©mission ?"
    ]
    
    for question in test_questions:
        print(f"\nüìã Test : {question}")
        result = agent.query(question)
        
        if result["success"]:
            print(f"‚úÖ Confiance: {result['confidence']}")
            print(f"üè¢ CC utilis√©e: {result['cc_used']}")
            print(f"üìÑ R√©ponse: {result['response'][:300]}...")
        else:
            print(f"‚ùå Erreur: {result['error']}")

if __name__ == "__main__":
    test_simple_agent()
