from langgraph.graph import StateGraph, START, END
from typing import TypedDict, Optional
from src.agents.web_agent import WebAgent
from src.agents.conventions_collectives_agent import ConventionsCollectivesAgent
from src.agents.droit_travail_agent import DroitTravailAgent
from langchain_ollama import ChatOllama
import requests
import os
from langgraph.checkpoint.memory import MemorySaver

# Structure de l'√©tat
class MasterState(TypedDict):
    user_query: str
    droit_travail_response: str
    needs_cc: bool
    cc_identified: Optional[str]
    cc_response: str
    final_response: str
    analysis: str

class IntelligentMasterAgent:
    def __init__(self):
        self.web_agent = WebAgent()
        self.cc_agent = ConventionsCollectivesAgent()
        self.droit_agent = DroitTravailAgent()
        model_name = os.getenv("MODEL_NAME", "llama3.1:latest")
        self.llm = ChatOllama(model=model_name)
        self.perplexity_key = os.getenv("PERPLEXITY_API_KEY")

    # =======================================================================
    # NODES
    # =======================================================================
    
    def fetch_general_labor_rules_node(self, state: MasterState):
        """Node obligatoire : appel √† l'agent droit du travail"""
        print("üîç Recherche des r√®gles g√©n√©rales du droit du travail...")
        
        result = self.droit_agent.query(state["user_query"])
        
        return {
            "droit_travail_response": result.get("response", "Aucune r√©ponse du droit du travail")
        }


    def analyze_cc_need_node(self, state: MasterState):
        """Node d'analyse : d√©termine si une convention collective est n√©cessaire"""
        print("ü§ñ Analyse de la n√©cessit√© d'une convention collective...")
        
        analysis_prompt = f"""
        Tu es un expert en droit du travail fran√ßais et sp√©cialiste des conventions collectives.

        CONTEXTE :
        Ton agent assistant "droit_agent" a d√©j√† √©t√© consult√© et a fourni une r√©ponse g√©n√©rale bas√©e sur le Code du travail.

        TA MISSION :
        Analyser si une convention collective sp√©cifique est n√©cessaire pour compl√©ter cette r√©ponse et r√©pondre avec pr√©cision √† la question de l'utilisateur.

        QUESTION DE L'UTILISATEUR :
        {state['user_query']}

        R√âPONSE G√âN√âRALE DU DROIT DU TRAVAIL (d√©j√† obtenue) :
        {state['droit_travail_response']}

        SC√âNARIOS POSSIBLES :

        üìå SI AUCUNE CONVENTION COLLECTIVE N'EST N√âCESSAIRE :
        - La r√©ponse du droit du travail est compl√®te et suffisante
        - La question porte sur des r√®gles g√©n√©rales du Code du travail
        - Aucun secteur, entreprise ou profession sp√©cifique n'est mentionn√©
        ‚Üí Dans ce cas, seule la r√©ponse du droit du travail sera utilis√©e

        üìå SI UNE CONVENTION COLLECTIVE EST N√âCESSAIRE :
        - La question fait r√©f√©rence √† un secteur, entreprise, ou profession sp√©cifique
        - La r√©ponse g√©n√©rale mentionne des variations selon les conventions collectives
        - Le sujet concerne des √©l√©ments variables (salaires minima, classifications, primes, cong√©s sp√©cifiques, etc.)
        ‚Üí Dans ce cas, ton agent assistant "cc_agent" sera consult√© avec la convention collective identifi√©e

        CRIT√àRES D'ANALYSE OBLIGATOIRES :
        1. ‚úì V√©rifier si la question fait r√©f√©rence explicitement ou implicitement √† un secteur d'activit√© pr√©cis, une profession sp√©cifique, une entreprise particuli√®re ou un organisme pr√©cis
        2. ‚úì D√©terminer si la r√©ponse g√©n√©rale mentionne des variations selon les conventions collectives
        3. ‚úì Identifier si le sujet concerne des √©l√©ments traditionnellement r√©gis par les conventions collectives (salaires minima, classification, dur√©e de pr√©avis, primes sp√©cifiques, cong√©s particuliers, temps de travail, indemnit√©s conventionnelles, etc.)

        FORMAT OBLIGATOIRE POUR TA R√âPONSE :

        ANALYSE DE LA N√âCESSIT√â D'UNE CONVENTION COLLECTIVE :
        - R√âPONSE : **OUI** ou **NON**
        - JUSTIFICATION : [Explication concise des raisons pr√©cises motivant ta r√©ponse, en citant les √©l√©ments pertinents de la question et/ou de la r√©ponse g√©n√©rale]
        
        {f"- CONVENTION COLLECTIVE SUGG√âR√âE : [Si OUI, indique le titre exact ou le type de convention collective qui serait applicable]" if True else ""}

        EXEMPLES POUR T'AIDER :
        - "Quel est le SMIC en France ?" ‚Üí **NON** (r√®gle g√©n√©rale du Code du travail)
        - "Quel est le salaire minimum des employ√©s de la CAF ?" ‚Üí **OUI** (organisme sp√©cifique + salaire conventionnel)
        - "Dur√©e l√©gale du travail ?" ‚Üí **NON** (r√®gle g√©n√©rale)
        - "Temps de travail des enseignants ?" ‚Üí **OUI** (profession sp√©cifique)
        - "Cong√©s pay√©s l√©gaux ?" ‚Üí **NON** (r√®gle g√©n√©rale)
        - "Primes de fin d'ann√©e dans le commerce ?" ‚Üí **OUI** (secteur sp√©cifique + primes conventionnelles)

        INSTRUCTIONS FINALES :
        - Sois pr√©cis, rigoureux et factuel
        - N'invente aucune information
        - Si tu n'es pas certain, privil√©gie la prudence et sugg√®re une v√©rification
        - Base-toi uniquement sur les √©l√©ments fournis dans la question et la r√©ponse g√©n√©rale
        """
        
        try:
            response = self.llm.invoke(analysis_prompt)
            analysis = response.content
            
            # D√©tection am√©lior√©e de la r√©ponse
            needs_cc = "**OUI**" in analysis.upper() or "R√âPONSE : OUI" in analysis.upper()
            
            return {
                "needs_cc": needs_cc,
                "analysis": analysis
            }
            
        except Exception as e:
            print(f"Erreur d'analyse : {e}")
            return {
                "needs_cc": False,
                "analysis": f"Erreur d'analyse : {e}. Par pr√©caution, aucune convention collective ne sera consult√©e."
            }
            

    def identify_cc_node(self, state: MasterState):
        """Node pour identifier pr√©cis√©ment la convention collective applicable"""
        print("üîç Identification pr√©cise de la convention collective applicable...")

        identification_prompt = f"""
        Tu es un expert en droit du travail fran√ßais et sp√©cialiste des conventions collectives.

        TA MISSION :
        Identifier pr√©cis√©ment la convention collective applicable √† la situation d√©crite dans la question pos√©e par l'utilisateur.

        QUESTION DE L'UTILISATEUR :
        "{state['user_query']}"

        √âTAPES √Ä SUIVRE :
        1. Identifie clairement le secteur d'activit√©, la profession, l'organisme ou l'entreprise explicitement ou implicitement mentionn√© dans la question.
        2. D√©termine pr√©cis√©ment :
            - Le nom exact de la convention collective applicable
            - Le num√©ro IDCC correspondant √† cette convention collective (format num√©rique √† 5 chiffres)
            - Le secteur ou sous-secteur d'activit√© clairement concern√©
        3. Si plusieurs conventions collectives peuvent correspondre, liste-les clairement en indiquant pour chacune :
            - Nom exact
            - Num√©ro IDCC pr√©cis
            - Secteur d'activit√© sp√©cifique
        4. Si aucune convention collective n'est clairement identifi√©e, mentionne-le explicitement et conseille √† l'utilisateur de pr√©ciser davantage ou de consulter L√©gifrance.

        FORMAT OBLIGATOIRE DE TA R√âPONSE :

        ‚úÖ CONVENTION(S) COLLECTIVE(S) IDENTIFI√âE(S) :
        - Nom : [Nom exact]
        - IDCC : [Num√©ro IDCC √† 5 chiffres]
        - Secteur d'activit√© : [Secteur pr√©cis]

        ‚ö†Ô∏è Si plusieurs conventions possibles :
        1. Nom : [Nom exact] - IDCC : [Num√©ro IDCC] - Secteur : [Secteur pr√©cis]
        2. Nom : [Nom exact] - IDCC : [Num√©ro IDCC] - Secteur : [Secteur pr√©cis]
        ...

        ‚ùå Si aucune convention clairement identifi√©e :
        "Aucune convention collective sp√©cifique clairement identifi√©e. Merci de pr√©ciser davantage la question ou de consulter directement le site officiel L√©gifrance."

        Sois pr√©cis, rigoureux et factuel, n'extrapole jamais, et utilise exclusivement des informations fiables issues de ta base documentaire ou de sources officielles v√©rifi√©es.
        """

        # Premier essai avec l'agent web
        web_result = self.web_agent.query(identification_prompt)

        if web_result.get("success", False):
            cc_identified = web_result["response"]
        else:
            # Fallback : deuxi√®me essai avec l'agent CC sp√©cialis√©
            cc_result = self.cc_agent.query(identification_prompt)
            cc_identified = cc_result.get("response", "Aucune convention collective sp√©cifique clairement identifi√©e.")

        # Validation humaine avec possibilit√© de pr√©ciser
        print(f"\nüìã Convention collective identifi√©e :")
        print(cc_identified)

        human_validation = input("\nCette convention collective est-elle correcte ? (oui/non/skip): ")

        if human_validation.lower().strip() == "skip":
            return {
                "cc_identified": None,
                "needs_cc": False
            }
        elif human_validation.lower().strip() == "non":
            user_cc = input("Veuillez sp√©cifier la convention collective correcte : ")
            return {
                "cc_identified": user_cc.strip() if user_cc.strip() else None
            }
        else:
            return {
                "cc_identified": cc_identified
            }


    def fetch_cc_rules_node(self, state: MasterState):
        """Node pour r√©cup√©rer les r√®gles sp√©cifiques de la convention collective identifi√©e"""
        print("üìÑ Recherche des r√®gles conventionnelles sp√©cifiques...")

        cc_query = f"""
        Tu es un agent expert en conventions collectives fran√ßaises. 

        TA MISSION :
        Fournir une r√©ponse pr√©cise et d√©taill√©e √† la question pos√©e par l'utilisateur, 
        en te basant exclusivement sur les r√®gles sp√©cifiques contenues dans la convention collective identifi√©e ci-dessous.

        QUESTION DE L'UTILISATEUR :
        {state['user_query']}

        CONVENTION COLLECTIVE APPLICABLE :
        {state['cc_identified']}

        R√àGLES √Ä RESPECTER POUR TA R√âPONSE :
        1. Base-toi uniquement sur les dispositions pr√©cises de la convention collective sp√©cifi√©e.
        2. Cite explicitement le num√©ro IDCC, le nom exact de la convention collective, et les articles pertinents (num√©ros, titres, sections) si disponibles.
        3. D√©taille clairement les r√®gles sp√©cifiques pr√©vues par la convention collective (exemples : salaires minima, dur√©e du pr√©avis, indemnit√©s particuli√®res, primes, temps de travail, cong√©s sp√©ciaux, classifications professionnelles, etc.).
        4. Si aucune r√®gle sp√©cifique n'est mentionn√©e clairement dans cette convention, indique-le explicitement et conseille de consulter directement le texte officiel sur L√©gifrance.

        FORMAT STRUCTUR√â OBLIGATOIRE POUR TA R√âPONSE :

        CONVENTION COLLECTIVE :
        - Nom exact : [Nom pr√©cis]
        - IDCC : [IDCC pr√©cis]

        R√âPONSE AUX R√àGLES SP√âCIFIQUES :
        - Articles pertinents : [Num√©ros et titres des articles]
        - R√®gles pr√©cises applicables : [Explications d√©taill√©es, crit√®res, montants, dur√©es, conditions, etc.]

        Si aucune r√®gle sp√©cifique trouv√©e :
        "Aucune r√®gle sp√©cifique clairement mentionn√©e dans cette convention collective concernant cette question. Consultez directement la convention collective sur L√©gifrance ou aupr√®s d'un professionnel."

        Sois pr√©cis, rigoureux, clair et factuel dans ta r√©ponse, et n'invente aucune information.
        """

        result = self.cc_agent.query(cc_query)

        return {
            "cc_response": result.get("response", "Aucune r√®gle conventionnelle trouv√©e")
        }

    def compile_final_response_node(self, state: MasterState):
        """Node pour compiler la r√©ponse finale"""
        print("üìù Compilation de la r√©ponse finale...")
        
        if state["needs_cc"] and state.get("cc_identified"):
            # R√©ponse compl√®te avec convention collective
            compiled_response = f"""
    üìã R√âPONSE COMPL√àTE

    ‚öñÔ∏è R√àGLES G√âN√âRALES DU DROIT DU TRAVAIL :
    {state['droit_travail_response']}

    üè¢ CONVENTION COLLECTIVE APPLICABLE :
    {state['cc_identified']}

    üìÑ R√àGLES CONVENTIONNELLES SP√âCIFIQUES :
    {state['cc_response']}
            """
        else:
            # R√©ponse bas√©e uniquement sur le droit du travail
            compiled_response = f"""
    üìã R√âPONSE

    ‚öñÔ∏è R√àGLES DU DROIT DU TRAVAIL :
    {state['droit_travail_response']}

    ‚ÑπÔ∏è Cette r√©ponse est bas√©e sur les r√®gles g√©n√©rales du droit du travail fran√ßais.
            """
        
        return {
            "final_response": compiled_response
        }

    def send_final_response_node(self, state: MasterState):
        """Node final pour envoyer la r√©ponse"""
        print("\n" + "="*60)
        print("‚úÖ R√âPONSE FINALE")
        print("="*60)
        print(state["final_response"])
        print("="*60)
        
        return {}

    # =======================================================================
    # CONDITIONAL EDGES
    # =======================================================================
    
    def route_after_analysis(self, state: MasterState):
        """Route apr√®s l'analyse du besoin de convention collective"""
        if state["needs_cc"]:
            return "identify_cc"
        else:
            return "compile_final_response"

    def route_after_cc_identification(self, state: MasterState):
        """Route apr√®s l'identification de la convention collective"""
        if state.get("cc_identified") and state["needs_cc"]:
            return "fetch_cc_rules"
        else:
            return "compile_final_response"

    # =======================================================================
    # CONSTRUCTION DU WORKFLOW
    # =======================================================================
    
    def build(self):
        """Construit le workflow intelligent"""
        workflow = StateGraph(MasterState)
        
        # Ajout des nodes
        workflow.add_node("fetch_general_rules", self.fetch_general_labor_rules_node)
        workflow.add_node("analyze_cc_need", self.analyze_cc_need_node)
        workflow.add_node("identify_cc", self.identify_cc_node)
        workflow.add_node("fetch_cc_rules", self.fetch_cc_rules_node)
        workflow.add_node("compile_final_response", self.compile_final_response_node)
        workflow.add_node("send_final_response", self.send_final_response_node)
        
        # D√©finition du flux
        workflow.add_edge(START, "fetch_general_rules")
        workflow.add_edge("fetch_general_rules", "analyze_cc_need")
        
        workflow.add_conditional_edges(
            "analyze_cc_need",
            self.route_after_analysis,
            {
                "identify_cc": "identify_cc",
                "compile_final_response": "compile_final_response"
            }
        )
        
        workflow.add_conditional_edges(
            "identify_cc",
            self.route_after_cc_identification,
            {
                "fetch_cc_rules": "fetch_cc_rules",
                "compile_final_response": "compile_final_response"
            }
        )
        
        workflow.add_edge("fetch_cc_rules", "compile_final_response")
        workflow.add_edge("compile_final_response", "send_final_response")
        workflow.add_edge("send_final_response", END)
        
        # Compilation avec m√©moire
        memory = MemorySaver()
        return workflow.compile(checkpointer=memory)

# =======================================================================
# UTILISATION
# =======================================================================

def main():
    """Fonction principale"""
    print("ü§ñ Agent Master Intelligent - Questions Juridiques")
    print("=" * 60)
    
    agent = IntelligentMasterAgent()
    app = agent.build()
    
    user_query = input("\n‚ùì Votre question juridique : ")
    
    # √âtat initial
    initial_state = {
        "user_query": user_query,
        "droit_travail_response": "",
        "needs_cc": False,
        "cc_identified": None,
        "cc_response": "",
        "final_response": "",
        "analysis": ""
    }
    
    # Configuration avec thread
    config = {"configurable": {"thread_id": "intelligent_session"}}
    
    # Ex√©cution
    try:
        final_state = app.invoke(initial_state, config)
        print("\n‚úÖ Session termin√©e avec succ√®s")
    except Exception as e:
        print(f"\n‚ùå Erreur : {e}")

if __name__ == "__main__":
    main()
